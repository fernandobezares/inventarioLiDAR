/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #000000 */ee.Geometry.Polygon(
        [[[-6.0665991210937475, 41.901937745285885],
          [-6.0665991210937475, 41.79554823777371],
          [-5.9512426757812475, 41.79554823777371],
          [-5.9512426757812475, 41.901937745285885]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//print(aAltdNBRL2.getDownloadURL({format: 'csv',filename: 'dNBR2 lulucf areas'}));

/*
var dwonloadButton = ui.Button({
  label: 'Download CSV area',
  onClick: function(){
    var url = aAltdNBRL2.getDownloadURL({format: 'csv',filename: 'dNBR2 lulucf areas'})
    
    var downPanel = ui.Panel()
    var label = ui.Label(url)
    
    downPanel.add(label)
    
    Map.add(downPanel)
  
}
})

Map.add(dwonloadButton)


*/

// import the functions 
var severityAnalysis = require('users/cesefor/inventarioForestal:ForestFireDetection/severityAnalysis');
var fireDetection = require('users/cesefor/inventarioForestal:ForestFireDetection/fireDetection');
var codMfe = require('users/cesefor/inventarioForestal:ForestFireDetection/codigos');

//rasters for stats analysis
var mfeEspecies = ee.Image('users/franciscogallego/mfeEspecies').rename('especies');
var mfeLulucf = ee.Image('users/franciscogallego/mfeLulucfCyl').rename('lulucf');


//---------------------------------------------------------------------------------------------


function printStats(stats){
  
  print('stats',stats)
  
  // labels 
  var headerDescription = ui.Label({value: 'Clase', style: {fontWeight: 'bold'}});
  var surfaceLabel = ui.Label({value: 'Superficie (ha)', style: {fontWeight: 'bold'}});
  
  //stats panel 
  var resultsPanel = ui.Panel({layout: ui.Panel.Layout.flow('vertical')});
  var headerResultsPanel = ui.Panel({ 
    widgets: [
      headerDescription,
      surfaceLabel
    ],
    layout: ui.Panel.Layout.flow('horizontal')});
  

  // get the size of the collection
  var size = ee.FeatureCollection(stats).size();
 
  
  // add items 
  resultsPanel.add(headerResultsPanel);
  
  
  
  // get the names of the vars
  for (var j = 0; j < size.getInfo(); j++) {
    
  //print(j)
  
  var feat = ee.Feature(stats.toList(1,j).get(0));
  //print(feat)
  
  // get band name 
  var band = feat.getString('band')//.getInfo();
  
  // get area stats 
  var area = feat.getNumber('area').format('%.2f').getInfo();  
  
  
  // get lulucf class 
  var lulucfCode = band.match('\\d\{3\}').get(0).getInfo();
  
  
  
  var descripcion = codMfe.lulucf[lulucfCode];
  
  //print(band,area)
  print(descripcion)
  
  
  resultsPanel.add(ui.Panel(
    {layout: ui.Panel.Layout.flow('horizontal'),
     widgets: [
        ui.Label({value: descripcion}),
        ui.Label({value: area})
        ]
  }))
               
    
    ;
  
  
}
  
  analysisPanel.add(resultsPanel);
  
  
  return 
}




// show selecting custom area (drawing) interface
function select_area_start(){
  drawingTools.setShape('polygon');
  drawingTools.draw();
}

// hide selecting area interface
function select_area_stop(){
    drawingTools.stop();
}

// clear user selected area
function clear_selected_area(){
    drawingTools.stop();
    drawingTools.clear();
    drawingTools.layers().reset();
    
}

function getAOI(){
  
  if(Map.drawingTools().layers().length() > 0){
      var geom_list = [];
      Map.drawingTools().layers().forEach(function(lay){
        lay.geometries().forEach(function(geom){
          geom_list.push(geom);
        });
      });
      
      var geom_collection = ee.FeatureCollection(geom_list.map(function(geom){
        return ee.Feature(geom);
      }));
    
    
    Map.drawingTools().layers().reset([ui.Map.GeometryLayer([geom_list[0]])]);
    
    return geom_collection.first();
}
}

function updateFires(layer){
  
  
  
  var name = 'Fires';
  
  Map.layers().forEach(function(lay){
    
    // name of the layer
    var nameFires = lay.getName();
    
    // match the string
    var match = nameFires.match(name);
    
    if (match.length() > 0){
      Map.layers().remove(lay);
    } 
    
        });
  
}


function getDateFromFires(){
  
  var fires = loadFires();
  
  var aoi = getAOI().geometry();
  
  var firesSelected = fires.filterBounds(aoi);
  
  var date = firesSelected.aggregate_min('doy_min');
  
  return date;
}

var visIndex = ee.Dictionary({
  'RBR':{min:-1,max:1, palette:['lightgreen', 'yellow', 'orange','red']},
  'RdNBR': {min:-1, max:1, palette:['lightgreen', 'yellow', 'orange','red']},
  'dNBR':{min:-0.3,max:1, palette:['lightgreen', 'yellow', 'orange','red']},
  'RBRclass':{min:0,max:3, palette:['white', 'yellow', 'orange','red']},
  'RdNBRclass': {min:0,max:3, palette:['white', 'yellow', 'orange','red']},
  'dNBRclass':{min:0,max:6, palette:['white', 'lightyellow','yellow','orange','red','purple']},
});


  



//
function run (){
  
  if (Map.layers().length() > 0){
    Map.layers().reset();
  }
  
  // get user defined area
  var userAOI = getAOI().geometry();
  
  // get date from the selected fire
  var date = getDateFromFires(); // gets dates and loads the fire polygon
  
  // index name
  var indexName = indexButton.getValue();
  
  var reclassIndexName = indexName +'class'; 
  
  // retrieve the info from the index;
  var indexes = severityAnalysis.getSpectralIndexes(date, userAOI);
  
  var indexImg = indexes.select(indexName);
  
  var severity = severityAnalysis.reclassifyIndexes(indexes, userAOI);
  
  var severityImg = severity.select(reclassIndexName);
  
  // add elements to the map
  
  Map.addLayer(indexImg,visIndex.get(indexName).getInfo(),indexName);
  Map.addLayer(severityImg,visIndex.get(reclassIndexName).getInfo(),reclassIndexName);
  
  Map.centerObject(userAOI,11);
  
  var loadingLabel = ui.Label({value:'Cargando estadísticas ...', style: {shown: true}});
   
  analysisPanel.add(loadingLabel);
  
  var lulucfStats = severityAnalysis.categoricalZonalStatistics (mfeLulucf,severityImg);

  //var lostWood = severityAnalysis.volumenArea(severityImg);
  //print(lostWood)
  
  //var url = lulucfStats.getDownloadURL({format: 'csv',filename: 'lostwood per intensity areas'})
  
  //labelResult.setValue('Areas de cobertura de suelo afectadas por el incendio: ' +  lulucfStats.getInfo())
  //labelLinkResult.setValue('link de descarga : ' + url)
  
  print('lulucfStats',lulucfStats);
  
  
  //lulucfStats.evaluate(function(stats){return printStats(stats)});
  lulucfStats.evaluate(printStats(lulucfStats));
  loadingLabel.style().set({shown: false});
  
}


//-----------------------------------------------------------------------------

// mensaje de carga 



// index selector 
var indexSelector = ui.Select({
  items:indexList,
  placeholder:'Indice'
});

// Panels are the main container widgets
var mainPanel = ui.Panel({
  style: {width: '365px'}
});

// title 
var title = ui.Label({
  value: 'Forest Fire Detector',
  style: {'fontSize': '24px'}
});


// You can even add panels to other panels
var datePanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
});


// year selector
var yearSelector = ui.Select({
  placeholder: 'cargando ...',
  });
  
// month selector start without vals
var monthSelector = ui.Select({
  placeholder: 'cargando ...',
  });

// loading button 
var loadButton = ui.Button('Cargar');

// description Label
var decriptionLabel = ui.Label({
  value : 
  'Bienvenido a la herramienta de monitoreo de incenidos forestales.'+
  '\n\t1)  seleccione un fecha para su análsis.'+
  '\n\t2)  marque un único incendio para su analisis.'+
  '\n\t3)  obtenga las estadisticas de superficie afectada.',
  style: {
    fontSize: '12px',
    whiteSpace :'pre',
    //textAlign :'centre',
    margin: '0px 0px 10px 8px'// arriba derecha izquierda abajo
  }
    
  });

//date Label
var dateLabel = ui.Label( {
  value:'Selecciona tu fecha de interés',
  style:{fontSize: '16px'}
  
});


// add elements to the panel

// You can add widgets to the panel
mainPanel.add(title);

// añadir panel al panel principal

mainPanel.add(decriptionLabel),
mainPanel.add(dateLabel);
mainPanel.add(datePanel);

// añadir elementos en el panel
datePanel.add(yearSelector);
datePanel.add(monthSelector);
datePanel.add(loadButton);

//-------------------------------------------------------------------------
// Let's add a dropdown with the years
var years = ee.List.sequence(2014, 2020);
var months = ee.List.sequence(1, 12);


//get current date 
var now = Date.now();
now = ee.Date(now);
var nowYear = now.get('year').toInt();

// years
var years = ee.List.sequence(2020, nowYear);

// compare dates and month names
var monthsObj = ee.Dictionary({
  'Enero':'1', 'Febrero':'2', "Marzo":'3',
  'Abril': '4', 'Mayo':'5', 'Junio':'6',
  'Julio':'7','Agosto':'8','Septiembre':'9',
  'Octubre':'10','Noviembre':'11','Diciembre':'12'
});

// monthNames
var months = ee.List(['Enero','Febrero', "Marzo",'Abril','Mayo','Junio',
  'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre']);

// get Index List 
var indexList = ['RBR','RdNBR','dNBR'];

// Dropdown items need to be strings
var yearStrings = years.map(function(year){
  return ee.Number(year).format('%04d');
});


// Evaluate the results and populate the dropdown
yearStrings.evaluate(function(yearList) {
  yearSelector.items().reset(yearList);
  yearSelector.setPlaceholder('selecciona un año');
});

months.evaluate(function(monthList) {
  monthSelector.items().reset(monthList);
  monthSelector.setPlaceholder('selecciona un mes');

});

// Define a function that triggers when any value is changed
var loadFires = function() {
  
  var fires = fireDetection.getDates().map(fireDetection.getFiresByMonth);
  fires = ee.FeatureCollection(fires).flatten();
  
  // get the value from the Selector
  var year = yearSelector.getValue();
  
  //get the value from teh selector and get the month in number to make the date
  var monthName = monthSelector.getValue();
  var month = monthsObj.get(monthName);
  
  var startDate = ee.Date.fromYMD(
    ee.Number.parse(year), ee.Number.parse(month), 1);
  var endDate = startDate.advance(-1, 'month');
  
    // filter by month
  var filtered = fires.filter(
    ee.Filter.and(
      ee.Filter.gte('doy_min',endDate.millis()),
      ee.Filter.lt('doy_min',startDate.millis())
      
      )
      );
  
  //var nighttimeVis = {min: 0.0, max: 60.0}
  var layerName = 'Fires ' + ee.String(year).getInfo() + '-' + monthName;
  
  print(Map.layers());
  
  Map.addLayer(ee.FeatureCollection(filtered), {}, layerName);
  
  return filtered;
};


// trigger onclick button
loadButton.onClick(loadFires);

var drawingTools = Map.drawingTools();


// define Panel for the buttons 
var areaPanel =  ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
});


// analysis Panel 
var analysisPanel = ui.Panel({layout: ui.Panel.Layout.flow('vertical')});

// Analysis Label
var analysisLabel = ui.Label('Análisis');

// IndexPanel 
var indexPanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});

// IndexLabel
var indexLabel = ui.Label({
  value:'Índice espectral',
  style:{fontSize:'10px',whiteSpace:'pre'}});

// Area Panel
var areaPanel = ui.Panel({layout: ui.Panel.Layout.flow('horizontal')});

// area Label 
var areaLabel = ui.Label('Define un área de estudio');
// aply button 
var Apply_button = ui.Button({
  label: 'Apply',
  onClick: function(){
      run();
  },
  style: {textAlign: 'center'}
});

// Select area button
var selectAreaButton = ui.Button({
  label: 'Select Area',
  onClick: function() {
    select_area_start();
  },
  style : {textAlign: 'center'},
});

// remove area button 
var removeAreaButton = ui.Button({
  label: 'Remove Area',
  onClick: function() {
    clear_selected_area();
  },
  style : {textAlign: 'center'}
});


// index Button area button 
var indexButton = ui.Select({
  placeholder: ' Indices',
  items : indexList
});

//------------------------------------------------------------------
// añadir panel al panel principal
mainPanel.add(analysisPanel);

// add elements to analysis Panel
analysisPanel.add(analysisLabel);

// add index Panel
analysisPanel.add(indexPanel);

// add elements to indexPanel
indexPanel.add(indexLabel).add(indexButton);

analysisPanel.add(areaLabel);
// add areaPanel to analysis panel
analysisPanel.add(areaPanel);

// añadir elementos en el panel
areaPanel.add(selectAreaButton);
areaPanel.add(removeAreaButton);
areaPanel.add(Apply_button);

var labelResult = ui.Label();
var labelLinkResult = ui.Label();
analysisPanel.add(labelResult).add(labelLinkResult);





// show histogram of productivity values in selected region
var chist_button = ui.Button({
  label: 'Calculate Area Histogram',
  onClick: function() {
    if(Map.drawingTools().layers().length() > 0){
      var geom_list = [];
      Map.drawingTools().layers().forEach(function(lay){
        lay.geometries().forEach(function(geom){
          geom_list.push(geom);
        });
      });
      var geom_collection = ee.FeatureCollection(geom_list.map(function(geom){
        return ee.Feature(geom);
      }));
      var chist = ui.Chart.image.histogram({
        image: Map.layers().get(0).getEeObject(),
        region: geom_collection.union(1),
        maxPixels: 1e13,
        scale: 10,
        maxBuckets: 32
      });
      clsHistPanel.clear();
      clsHistPanel.add(chist);
    }
  },
  style : {textAlign: 'center'}    
});


// add element to Maps
Map.setCenter(-4.74, 41.65, 8);
ui.root.add(mainPanel);
