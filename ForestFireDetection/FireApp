//print(aAltdNBRL2.getDownloadURL({format: 'csv',filename: 'dNBR2 lulucf areas'}));



/*
var dwonloadButton = ui.Button({
  label: 'Download CSV area',
  onClick: function(){
    var url = aAltdNBRL2.getDownloadURL({format: 'csv',filename: 'dNBR2 lulucf areas'})
    
    var downPanel = ui.Panel()
    var label = ui.Label(url)
    
    downPanel.add(label)
    
    Map.add(downPanel)
  
}
})

Map.add(dwonloadButton)


*/

// import the functions 
var severityAnalysis = require('users/cesefor/inventarioForestal:ForestFireDetection/severityAnalysis');
var fireDetection = require('users/cesefor/inventarioForestal:ForestFireDetection/fireDetection');




//-----------------------------------------------------------------------------

// index selector 
var indexSelector = ui.Select({
  items:indexList,
  placeholder:'Indice'
});

// Panels are the main container widgets
var mainPanel = ui.Panel({
  style: {width: '350px'}
});

// title 
var title = ui.Label({
  value: 'Forest Fire Detector',
  style: {'fontSize': '24px'}
});


// You can even add panels to other panels
var dropdownPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
});


// year selector
var yearSelector = ui.Select({
  placeholder: 'cargando ...',
  });
  
// month selector start without vals
var monthSelector = ui.Select({
  placeholder: 'cargando ...',
  });

// loading button 
var loadButton = ui.Button('Cargar');

// add elements to the panel

// You can add widgets to the panel
mainPanel.add(title);

// añadir panel al panel principal
mainPanel.add(dropdownPanel);

// añadir elementos en el panel
dropdownPanel.add(yearSelector);
dropdownPanel.add(monthSelector);
dropdownPanel.add(loadButton);

//-------------------------------------------------------------------------
// Let's add a dropdown with the years
var years = ee.List.sequence(2014, 2020);
var months = ee.List.sequence(1, 12);


//get current date 
var now = Date.now();
now = ee.Date(now);
var nowYear = now.get('year').toInt();

// years
var years = ee.List.sequence(2020, nowYear);

// compare dates and month names
var monthsObj = ee.Dictionary({
  'Enero':'1', 'Febrero':'2', "Marzo":'3',
  'Abril': '4', 'Mayo':'5', 'Junio':'6',
  'Julio':'7','Agosto':'8','Septiembre':'9',
  'Octubre':'10','Noviembre':'11','Diciembre':'12'
});

// monthNames
var months = ee.List(['Enero','Febrero', "Marzo",'Abril','Mayo','Junio',
  'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre']);

// get Index List 
var indexList = ['RBR','RdNBR','dNBR'];

// Dropdown items need to be strings
var yearStrings = years.map(function(year){
  return ee.Number(year).format('%04d');
});


// Evaluate the results and populate the dropdown
yearStrings.evaluate(function(yearList) {
  yearSelector.items().reset(yearList);
  yearSelector.setPlaceholder('selecciona un año');
});

months.evaluate(function(monthList) {
  monthSelector.items().reset(monthList);
  monthSelector.setPlaceholder('selecciona un mes');

});

// Define a function that triggers when any value is changed
var loadFires = function() {
  
  var fires = fireDetection.getDates().map(fireDetection.getFiresByMonth);
  fires = ee.FeatureCollection(fires).flatten();
  
  // get the value from the Selector
  var year = yearSelector.getValue();
  
  //get the value from teh selector and get the month in number to make the date
  var monthName = monthSelector.getValue();
  var month = monthsObj.get(monthName);
  
  var startDate = ee.Date.fromYMD(
    ee.Number.parse(year), ee.Number.parse(month), 1);
  var endDate = startDate.advance(-1, 'month');
  
    // filter by month
  var filtered = fires.filter(
    ee.Filter.and(
      ee.Filter.gte('doy_min',endDate.millis()),
      ee.Filter.lt('doy_min',startDate.millis())
      
      )
      );
  
  //var nighttimeVis = {min: 0.0, max: 60.0}
  var layerName = 'Fires ' + ee.String(year).getInfo() + '-' + monthName;
  Map.addLayer(ee.FeatureCollection(filtered), {}, layerName);
  
  return filtered;
};


// trigger onclick button
loadButton.onClick(loadFires);

var drawingTools = Map.drawingTools();



// show selecting custom area (drawing) interface
function select_area_start(){
  drawingTools.setShape('polygon');
  drawingTools.draw();
}

// hide selecting area interface
function select_area_stop(){
    drawingTools.stop();
}

// clear user selected area
function clear_selected_area(){
    drawingTools.stop();
    //drawingTools.layers().reset();
    //bind_events_to_drawing_tools();
    //if_user_geometry();
}


// do some interface tweaks when custom geometry is drawn
function if_user_geometry(){
  var layers_togo = Map.drawingTools().layers().length();
  if(layers_togo){
    
  }else{
       
  }
}

/*
// drawing tools bindings; events have to be rebind every time when .clear() is called (weird?)
function bind_events_to_drawing_tools(){
  Map.drawingTools().onDraw(if_user_geometry);
  Map.drawingTools().onEdit(if_user_geometry);
  Map.drawingTools().onErase(if_user_geometry);
  Map.drawingTools().onLayerAdd(if_user_geometry);
  Map.drawingTools().onLayerRemove(if_user_geometry);
}


bind_events_to_drawing_tools();

*/


// define Panel for the buttons 
var areaPanel =  ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
});

// aply button 
var Apply_button = ui.Button({
  label: 'Apply',
  onClick: function(){
      changeClsMethod(true);
  },
  style: {textAlign: 'center'}
});

// Select area button
var selectAreaButton = ui.Button({
  label: 'Select Area',
  onClick: function() {
    select_area_start();
  },
  style : {textAlign: 'center'},
});

// remove area button 
var removeAreaButton = ui.Button({
  label: 'Remove Area',
  onClick: function() {
    clear_selected_area();
  },
  style : {textAlign: 'center'}
});

//------------------------------------------------------------------
// añadir panel al panel principal
mainPanel.add(areaPanel);

// añadir elementos en el panel
areaPanel.add(selectAreaButton);
areaPanel.add(removeAreaButton);
areaPanel.add(Apply_button);



// show histogram of productivity values in selected region
var chist_button = ui.Button({
  label: 'Calculate Area Histogram',
  onClick: function() {
    if(Map.drawingTools().layers().length() > 0){
      var geom_list = [];
      Map.drawingTools().layers().forEach(function(lay){
        lay.geometries().forEach(function(geom){
          geom_list.push(geom);
        });
      });
      var geom_collection = ee.FeatureCollection(geom_list.map(function(geom){
        return ee.Feature(geom);
      }));
      var chist = ui.Chart.image.histogram({
        image: Map.layers().get(0).getEeObject(),
        region: geom_collection.union(1),
        maxPixels: 1e13,
        scale: 10,
        maxBuckets: 32
      });
      clsHistPanel.clear();
      clsHistPanel.add(chist);
    }
  },
  style : {textAlign: 'center'}    
});


// add element to Maps
Map.setCenter(-4.74, 41.65, 8);
ui.root.add(mainPanel);
