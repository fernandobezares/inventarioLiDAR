/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mfecyl = ee.FeatureCollection("users/cesefor/InventarioForestal/mfe_CastillayLeon"),
    mfe2 = ee.FeatureCollection("users/cesefor/MFE_2_1996_Esp_ED50"),
    mfe3 = ee.FeatureCollection("users/cesefor/general/MFE_3_Peninsula_Baleares_2006"),
    corine = ee.ImageCollection("COPERNICUS/CORINE/V20/100m"),
    loss = ee.Image("users/cesefor/Nitens/yodLossNitens3"),
    nitensMFE4 = ee.FeatureCollection("users/cesefor/Nitens/Nitens_Cantabrico");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// import canopy height image 2019
// https://glad.umd.edu/dataset/gedi

var canopyHeight = ee.ImageCollection('users/potapovpeter/GEDI_V27');

canopyHeight = canopyHeight.filter(ee.Filter.eq('system:index','GEDI_NAFR_v27')).first();

// Filter MFE dataset. Selecting E.nitens 
/*
function to25830 (feat){
  return feat.transform({proj:ee.Projection('epsg:25830'), maxError: 1});
}

var mfe2 = mfe2.map(to25830);
var mfe3 = mfe3.map(to25830);

var estados = mfe2.aggregate_array('ROTULO1').distinct().sort();
print(estados);

var filtros = ee.Filter.and(
ee.Filter.eq('SP1',64),
ee.Filter.inList('E1',[4,3]),
ee.Filter.inList('CCAA_MFE50',[11,12,13,21])
) ;

var filtros2 = ee.Filter.and(
ee.Filter.eq('ROTULO1',64)
//ee.Filter.eq('NOM_FORARB','Eucaliptales'),
//ee.Filter.inList('CCAA_MFE50',[11,12,13,21])
) ;

var nitensFustal = mfe3.filter(filtros);
var nitensFustal2 = mfe2.filter(filtros2);
*/


// ------------------------------------ FOREST AREAS 2000 -------------------------------------------

// image Corine 2000
var corine2000 = corine.filterDate('1999-01-01','2001-02-02').first();

// get only forests 
var c20Forest = ee.Image(0) // create const raster 
.where(corine2000.eq(311),1) 
.where(corine2000.eq(313),1);

// palette 
var corinePalette = corine2000.get('landcover_class_palette').getInfo();

// get the landcover names 
var corineClassNames = corine2000.get('landcover_class_names').getInfo();

// get teh landcover values
var corineClassValues = corine2000.get('landcover_class_values').getInfo();

// get elements length from the landcover palette
var elements = ee.List(corinePalette).length().getInfo();



print (ee.Dictionary.fromLists(corinePalette,corineClassNames));
//print('corineClassValues',corineClassValues);

print('corine200',corine2000);
print('corinePalette', corinePalette);
// ---------------------------- CORINE LEGEND ----------------------------

// set position of panel
var legend = ui.Panel({
  layout: ui.Panel.Layout.Flow('vertical'),
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    height :'300px',
    width : '600px'
  }
});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Corine LandCover Classes',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});


// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // Create teh label filled with the landcover code
      
      var code = ui.Label({
        value: '| ' + code + ' |',
        style: {
          margin: '0 0 4px 6px',
          fontWeight: 'bold',
        }
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description ],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 

// create a legend for the palette 
for (var i = 0; i < elements; i++){
  
  var nameLabel = '| '+ corineClassValues[i] + ' |' + corineClassNames[i];
  
  legend.add(makeRow(corinePalette[i], nameLabel));
  
}
// -------------- Results Legend ---------------------------------------------------------------

var resultsNames = ['Areas de bosque en 2000 nitens con nitens en MFE4', 'Bosque con nitens sin cambios desde 2000', 'Bosque mixto y Bosque caducifolio (aÃ±o 2000)' ];
var resultsColors = ['f54242','c842f5', '2de060'];

// set position of panel
var resultLegend = ui.Panel({
  layout: ui.Panel.Layout.Flow('vertical'),
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    height :'100px',
    width : '400px'
  }
});
 
// Create legend title
var resultslegendTitle = ui.Label({
  value: 'Resultados',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});


resultLegend.add(resultslegendTitle);

// create a legend for the palette 
for (var i = 0; i < 3; i++){

  resultLegend.add(makeRow(resultsColors[i], resultsNames[i]));
  
}


// ------------- GET THE FORESTED AREAS IN 2000 THAT TODAY HAVE NITENS ------------------------

// get the areas where there was nitens in 2000 and it was forest 
var nitens2000 = c20Forest.clip(nitensMFE4);

// get unchanged areas 
var unchanged = loss.unmask(0).eq(0);

// get unchanged areas 
var nitensUnchanged = nitens2000.multiply(unchanged);

// mask changed areas 
nitensUnchanged = nitensUnchanged.updateMask(nitensUnchanged.eq(1));

// select heights above 15m 
var heigthMask = canopyHeight.gte(15);

// apply Mask
nitensUnchanged = nitensUnchanged.updateMask(heigthMask);






// -------------------- ADD LAYERS TO MAP -----------------------------------------------------
// print the dataset with

//Map.add(legend) 
//Map.addLayer(corine2000,{min: 111, max :523, palette : corinePalette },'Land Cover Corine 2000');

Map.add(resultLegend) 

Map.addLayer(c20Forest.updateMask(c20Forest.eq(1)),{min:0,max:1 , palette: ['#2de060']},'Forest and semi natural areas; forests; broad-leaved forest and Mixed');
Map.addLayer(nitens2000.updateMask(nitens2000.eq(1)),{min:0,max:1, palette: ['#f54242']},'Areas de bosque en 2000 nitens con nitens en MFE4');
Map.addLayer(nitensUnchanged,{min:0,max:1, palette: ['white','#c842f5']},'Bosque con nitens sin cambios desde 2000' );

//print('nitens_fustal', nitensFustal.toList(10,0));
//print('nitens_fustal_mfe2', nitensFustal2);


Map.addLayer(nitensMFE4,{color:'red'},'nitens Fustal');
//Map.addLayer(nitensFustal2,{color:'blue'},'nitens Fustal2');

