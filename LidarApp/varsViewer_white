/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var fcc = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/FCC"),
    p95 = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/P95"),
    mdav = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/MDAV");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// import LiDAR Vars
var lidar = require('users/cesefor/inventarioForestal:LidarApp/inc/LiDARVars');

// import featureVierws
var fv = require('users/cesefor/inventarioForestal:LidarApp/inc/FeatureViewLidar');

// aoi list
var provinciasNames = ['Ávila','Burgos','León','Palencia','Salamanca','Segovia','Soria','Valladolid','Zamora'];


// import custom styles
var styles = require('users/cesefor/inventarioForestal:LidarApp/inc/mapStyles');

// set a map style
Map.setOptions('White', {'White': styles.white_style}) // 'Default': styles.custom_style});

// aoi datasets 
var cyl = ee.FeatureCollection('users/cesefor/general/adminUnits/LimiteAdmin_CyL');
//var cylStyled = cyl.style({color : 'black' , fillColor:'FF000000'});

// cyl Provinces 
var cylP = ee.FeatureCollection('users/cesefor/general/adminUnits/Provincias_ETRS89').filter(ee.Filter.inList('NAMEUNIT',provinciasNames));
//var cylPStyled = cylP.style({color : 'black' , fillColor:'FF000000' , lineType : 'dashed', width: 0.7} );

// gradiente obj
var gradient_obj = ui.Panel();

// create a global var to store the legend
var colorBar;


//check which cover is selected
function checkDatasetCovers(cobertura){
  
  // check the value of the select cobertura 
  if (cobertura === null){
    
    alert('Selecciona una cobertura');
  // if cobertura is not null
  } else {
    
    // if cobertura is equal to 1c then retrieve the keys 
    if (cobertura === '1a Cobertura'){
     
      // return the keys of the 1 cover object
      return Object.keys(lidar.c1);
    
  }else if (cobertura === '2a Cobertura'){
    
      // return the keys of the 2 cover object
      return Object.keys(lidar.c2);
    }
  
    
  }
    
}

//check which cover is selected
function checkCovers(cobertura){
  
  // check the value of the select cobertura 
  if (cobertura === null){
    
    alert('Selecciona una cobertura');
  // if cobertura is not null
  } else {
    
    // if cobertura is equal to 1c then retrieve the keys 
    if (cobertura === '1a Cobertura'){
     
      // return the keys of the 1 cover object
      return 'c1';
    
  }else if (cobertura === '2a Cobertura'){
    
      // return the keys of the 2 cover object
      return 'c2';
    }
  
    
  }
    
}
 
/*
var visualizations = {
  'fcc': {min:0,max:100,palette:['white','lightyellow','lightgreen','green']},
  'mdav':{min:0,max:25,palette:['white','lightblue','blue','purple']},
  'elev_95':{min:0,max:20,palette:['white','lightyellow','orange','red']},
  'elev_75':{min:0,max:15,palette:['white','lightyellow','orange','red']},
  'Canopy_Relief_Ratio': {min:0 ,max:1 ,palette:['white','lightgrey','grey','black']},
  'vcc':{min:0,max:30,palette:['white','lightgrey','grey','black']},
  'All_returns_above_heightbreak_div_Total_first_returns_100':{min:0,max:100,palette:['white','lightgrey','grey','black']},
  'G': {min:0,max:4,palette:['white','lightgrey','#283758','	#a024d6']}, 
  
};
*/
// ['white','#7f0278']

var visualizations = {
  'fcc': {min:0,max:100,palette:['white','lightgrey','#283758','	#c378e3']},
  'mdav':{min:0,max:25,palette:['white','lightgrey','#283758','	#c378e3']},
  'elev_95':{min:0,max:25,palette:['white','lightgrey','#283758','	#c378e3']},
  'elev_75':{min:0,max:20,palette:['white','lightgrey','#283758','	#c378e3']},
  'Canopy_Relief_Ratio': {min:0 ,max:1 ,palette:['white','lightgrey','#283758','	#c378e3']},
  'vcc':{min:0,max:30,palette:['white','lightgrey','#283758','	#c378e3']},
  'All_returns_above_heightbreak_div_Total_first_returns_100':{min:0,max:100,palette:['white','lightgrey','#283758','	#c378e3']},
  'G': {min:0,max:4,palette:['white','lightgrey','#283758','	#c378e3']}, 
  
};

// unitd dict

var units = {
  'fcc': '(%)',
  'mdav': '(m)',
  'elev_95': '(m)',
  'elev_75':'(m)',
  'Canopy_Relief_Ratio': '' ,
  'vcc': '(m3)',
  'All_returns_above_heightbreak_div_Total_first_returns_100':'' ,
  'G': '(m2)', 
  
};

// show loading / calculating message
function show_loading(loading_msg){
  valuePanel.clear();
  valuePanel.style().set({shown:true});
  valuePanel.add(ui.Label(loading_msg, {color: 'gray', textAlign: 'center', width: '98%'}));
  
}

// function for creating the legend
function createColorBar(titleText, unit, palette, min, max) {
  // Legend Title
  var title = ui.Label({
    value: titleText + ' ' + unit , 
    style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal'}});

  // Colorbar
  var legend = ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x20',
      format: 'png', 
      min: 0, max: 1,
      palette: palette},
    style: {stretch: 'horizontal', margin: '8px 8px', maxHeight: '40px'},
  });
  
  // Legend Labels
  var labels = ui.Panel({
    widgets: [
      ui.Label(min, {margin: '4px 10px',textAlign: 'left', stretch: 'horizontal'}),
      ui.Label((min+max)/2, {margin: '4px 20px', textAlign: 'center', stretch: 'horizontal'}),
      ui.Label(max, {margin: '4px 10px',textAlign: 'right', stretch: 'horizontal'})],
    layout: ui.Panel.Layout.flow('horizontal')});
  
  // Create a panel with all 3 widgets
  var legendPanel = ui.Panel({
    widgets: [title, legend, labels],
    style: {position: 'bottom-center', padding: '8px 15px'}
  });
  return legendPanel;
}

  
// function for displaying teh selected image
function displayImage(image,cover){
  
    // image to represent
    var varImg = ee.Image(lidar[cover][image]) //.updateMask(lidar[cover][image].gte(0));
    
    
    // visualziation parameters
    var vis = visualizations[image];
    
      // pallete
      var palette = vis.palette;
      
      // min
      var min = vis.min;
      
      //max 
      var max = vis.max;
      
      //unit
      var unit = units[image];
    
    //print(Map.layers().length())
    
    if (Map.layers().length() > 0 ){
      
      // clear the Map and add the selected layer 
      Map.layers().reset();
      
      // remove the first elemento of the widgets
      Map.widgets().remove(Map.widgets().get(0))
      
      
    } else{
      
    }
    // visualize vars 
      //Map.layers().insert(0,varImg);
      
      //add mfe on the bottom
      Map.add(fv.mfeStyled);
      // visualize vars 
      Map.addLayer(varImg, vis, image,1);
      
      // add the Main Panel
      //Map.add(mainPanel);
      
      // visualize provinces
      Map.add(fv.cylPStyled);
      Map.add(fv.cylStyled);
      
      /*
      Map.addLayer(cylPStyled,{},'Provincias',0);
      Map.addLayer(cylStyled,{},'CYL',0);
      */
      
      // add legend
      // Call the function to create a colorbar legend
      colorBar = createColorBar(image, unit, palette, min, max);
      
      Map.widgets().insert(0,colorBar);
    
    return colorBar
}
  

// 
// ui.Panel
var mainPanel = ui.Panel({layout : ui.Panel.Layout.flow('vertical')});
mainPanel.style().set({width:'300px', margin:"4px"});

// Main Title 
var mainTitle = ui.Label('Visor Variables LiDAR');
mainTitle.style().set({fontWeight :'bold', textAlign : 'center', color : '#332f2b',backgroundColor : '#ffffff'});

// cover lists
var cobs = ['1a Cobertura','2a Cobertura'];

// ui.Panel for covers 
var buttonPanels = ui.Panel({layout:ui.Panel.Layout.flow('vertical')});
buttonPanels.style().set({backgroundColor:'#ffffff',width:'100%'});// #c0b09e


// select Dataset from coberturas 
var datasetSelect = ui.Select({
  items: [],
  style: {width: "95%"},
  placeholder:'Datasets'
});

// loading datasets 
var loadingDatasetSelect = ui.Select({
  items: [],
  style: {width: "95%"},
  placeholder:'Loading...'
});


// ui.Select coberturas
var coberturaSelect = ui.Select({
  items: cobs,
  placeholder:'Seleccionar Cobertura LiDAR',
  //value: '1a Cobertura',
  style: {width: "95%"},
  onChange:function(cover){
    buttonPanels.clear().add(coberturaSelect).add(loadingDatasetSelect);
    // chechk the  type of LiDR Cover 
    var datasets = checkDatasetCovers(cover);
    ee.List(datasets).evaluate(function(list){
      //print(list)
        datasetSelect = ui.Select({
          placeholder: 'Variables LiDAR',
          items: list,
          style: {width: "95%"},
          //value: 'All regions'
          onChange: function(image){
            
            return displayImage(image,checkCovers(cover))}
        });
    buttonPanels.clear().add(coberturaSelect).add(datasetSelect); 
    });
  }
});
      
buttonPanels.clear().add(coberturaSelect).add(datasetSelect);


// panel for showing the values: show values click
var valuePanel = ui.Panel(ui.Label('Click on the map to get productivity value', {textAlign: 'center', width: '280px' }));
valuePanel.style().set({
  position: 'top-center',
  width: '280px',
  shown:false
});


// add widgets to panel 
Map.setCenter(-4.758, 41.607,7.5);

// set cursor type for evaluation of pixels
Map.style().set('cursor', 'crosshair');

Map.add(valuePanel);

// add the Main Panel
mainPanel.add(mainTitle).add(buttonPanels);
mainPanel.style().set({position:'middle-left', padding: '8px 15px',backgroundColor: '#ffffff'});
Map.add(mainPanel);
//ui.root.add(mainPanel);


// leyenda mfe


// set position of panel
var mfeLegend = ui.Panel({
  layout: ui.Panel.Layout.Flow('vertical'),
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    height :'90px',
    width : '200px'
  }
});
 
// Create legend title
var mfeLegendTitle = ui.Label({
  value: 'MFE Tipo Arbolado ',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 10px 0',
    padding: '0'
    }
});


// Add the title to the panel
mfeLegend.add(mfeLegendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
    
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description ],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
// create lists for the legend representation
var mfeClass = ['Coníferas','Frondosas'];
var mfeColor = ['defade','b3d9b3'];
var elements = 2;

// create a legend for the palette 
for (var i = 0; i < elements; i++){
  
  var nameLabel = '| '+ mfeClass[i] ;
  
  mfeLegend.add(makeRow(mfeColor[i], nameLabel));
  
}



Map.onClick(function(coords){
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  // get the second element in the Map.Layers list and reduce it to first()
  var reduce = Map.layers().get(1).getEeObject().reduce(ee.Reducer.first());
  print ('layers 0', Map.layers().get(1).getEeObject());
  var sampledPoint = reduce.reduceRegion(ee.Reducer.first(), point, 10);
  var computedValue = sampledPoint.get('first');
  show_loading('Loading...');
  computedValue.evaluate(function(result){
    valuePanel.clear();
    if(result === null){
      valuePanel.add(ui.Label('Selected pixel has no value', {textAlign: 'center', width: '98%'}));

    }else{
      valuePanel.add(ui.Label(result.toFixed(2),{textAlign: 'center', width: '98%'}));
    }
  });
});



// Call back function activated when layers load
Map.onTileLoaded(function(){
  
  // timeout of 100 milliseconds to check whihc layers are in the app
  ui.util.setTimeout(function(){
    
    // Get map Layers
  var layers = Map.layers();
  
  // check if the feature view is activated  
  if (layers.get(0).getShown()){
    
  
      //check if teh weidhget list contains the legennd if not add it
     if (Map.widgets().contains(mfeLegend)){} else {Map.add(mfeLegend)}
   
  } else {
    //remove the legend if it is not shown
    Map.remove(mfeLegend);
    
  }
  
  // check if the layers are set and displays a legend
  if (layers.get(1).getShown()){
  
  //check if the widget list contains the legennd if not add it

  colorBar.style().set({'shown':true});
   
  } else {
    
    // hide the legend if LiDAR var layer is not shown
    colorBar.style().set({'shown':false});
    
  }
  
  }, 0.00000000001); // set 0.01 miliseconds of pause so that the app detects all the layers 
  
  
});

