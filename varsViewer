/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var fcc = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/FCC"),
    p95 = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/P95"),
    mdav = ee.ImageCollection("users/cesefor/InventarioForestal/LiDAR/1C/MDAV");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// import LiDAR Vars
var lidar = require('users/cesefor/inventarioForestal:LiDARVars');

// aoi list
var provinciasNames = ['Ávila','Burgos','León','Palencia','Salamanca','Segovia','Soria','Valladolid','Zamora'];

// aoi datasets 
var cyl = ee.FeatureCollection('users/cesefor/general/adminUnits/LimiteAdmin_CyL');
var cylStyled = cyl.style({color : 'black' , fillColor:'FF000000'});

// cyl Provinces 
var cylP = ee.FeatureCollection('users/cesefor/general/adminUnits/Provincias_ETRS89').filter(ee.Filter.inList('NAMEUNIT',provinciasNames));
var cylPStyled = cylP.style({color : 'black' , fillColor:'FF000000' , lineType : 'dashed', width: 0.7} );



// cargar las fcc
var fcc = fcc.mosaic();

// cargar la p95
var p95 = p95. mosaic();
var mdav = mdav.map(function(image){return image.updateMask(image.neq(0))}).mosaic();

// visualize vars 
Map.addLayer(fcc,{min:0,max:100,palette:['white','lightyellow','lightgreen','green']},'fcc',0);
Map.addLayer(p95,{min:0,max:25,palette:['white','lightyellow','orange','red']},'p95',0);
Map.addLayer(mdav,{min:0,max:25,palette:['white','lightblue','blue','purple']},'mdav',0);

// visualize provinces
Map.addLayer(cylPStyled,{},'Provincias',0);
Map.addLayer(cylStyled,{},'CYL',0);


//check which cover is selected
function checkDatasetCovers(cobertura){
  
  // check the value of the select cobertura 
  if (cobertura === null){
    
    alert('Selecciona una cobertura');
  // if cobertura is not null
  } else {
    
    // if cobertura is equal to 1c then retrieve the keys 
    if (cobertura === '1a Cobertura'){
     
      // return the keys of the 1 cover object
      return Object.keys(lidar.c1);
    
  }else if (cobertura === '2a Cobertura'){
    
      // return the keys of the 2 cover object
      return Object.keys(lidar.c2);
    }
  
    
  }
    
}

//check which cover is selected
function checkCovers(cobertura){
  
  // check the value of the select cobertura 
  if (cobertura === null){
    
    alert('Selecciona una cobertura');
  // if cobertura is not null
  } else {
    
    // if cobertura is equal to 1c then retrieve the keys 
    if (cobertura === '1a Cobertura'){
     
      // return the keys of the 1 cover object
      return 'c1';
    
  }else if (cobertura === '2a Cobertura'){
    
      // return the keys of the 2 cover object
      return 'c2';
    }
  
    
  }
    
}

var visualizations = {
  'fcc': {min:0,max:100,palette:['white','lightyellow','lightgreen','green']},
  'mdav':{min:0,max:25,palette:['white','lightblue','blue','purple']},
  'elev_95':{min:0,max:25,palette:['white','lightyellow','orange','red']},
}

print(Map.layers())
 

// function for creating the legend
function createColorBar(titleText, palette, min, max) {
  // Legend Title
  var title = ui.Label({
    value: titleText, 
    style: {fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal'}});

  // Colorbar
  var legend = ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '200x20',
      format: 'png', 
      min: 0, max: 1,
      palette: palette},
    style: {stretch: 'horizontal', margin: '8px 8px', maxHeight: '40px'},
  });
  
  // Legend Labels
  var labels = ui.Panel({
    widgets: [
      ui.Label(min, {margin: '4px 10px',textAlign: 'left', stretch: 'horizontal'}),
      ui.Label((min+max)/2, {margin: '4px 20px', textAlign: 'center', stretch: 'horizontal'}),
      ui.Label(max, {margin: '4px 10px',textAlign: 'right', stretch: 'horizontal'})],
    layout: ui.Panel.Layout.flow('horizontal')});
  
  // Create a panel with all 3 widgets
  var legendPanel = ui.Panel({
    widgets: [title, legend, labels],
    style: {position: 'bottom-center', padding: '8px 15px'}
  })
  return legendPanel
}

  
// function for displaying teh selected image
function displayImage(image,cover){
  
    // image to represent
    var varImg = lidar[cover][image];
    
    // visualziation parameters
    var vis = visualizations[image];
    
      // pallete
      var palette = vis.palette;
      
      // min
      var min = vis.min;
      
      //max 
      var max = vis.max;
    
    if (Map.layers().length() >0 ){
      
      // clear the Map and add the selected layer 
      Map.clear();
      
      // add images
      
      // visualize vars 
      Map.addLayer(varImg, vis, image,1);
      
      
      // visualize provinces
      Map.addLayer(cylPStyled,{},'Provincias',0);
      Map.addLayer(cylStyled,{},'CYL',0);
      
      // add legend
      // Call the function to create a colorbar legend
      var colorBar = createColorBar(image, palette, min, max);

      Map.add(colorBar);
      
      
    } else{
      
      // visualize vars 
      Map.addLayer(varImg, vis, image,1);
      
      
      // visualize provinces
      Map.addLayer(cylPStyled,{},'Provincias',0);
      Map.addLayer(cylStyled,{},'CYL',0);
      
      // add legend
      // Call the function to create a colorbar legend
      var colorBar = createColorBar(image, palette, min, max);

      Map.add(colorBar);
      
    }
  
}
  

// 
// ui.Panel
var mainPanel = ui.Panel({layout : ui.Panel.Layout.flow('vertical')});
mainPanel.style().set({width:'300px', margin:"4px"});

// Main Title 
var mainTitle = ui.Label('Visor Variables LiDAR');

// Select area
var aoi = ui.Select({
  items: provinciasNames.concat(['Castilla y León']) ,
  onChange: function(name){
    
    // get the name and check
    if (name === 'Castilla y León'){
      
      
      Map.addLayer(cylStyled,{},'CYL');

      
    } else {
      
      
    }
    
    
  }
});

// cover lists
var cobs = ['1a Cobertura','2a Cobertura'];

// ui.Panel for covers 
var buttonPanels = ui.Panel({layout:ui.Panel.Layout.flow('vertical')});
buttonPanels.style().set({backgroundColor:'#c0b09e',width:'100%'})


// select Dataset from coberturas 
var datasetSelect = ui.Select({
  items: [],
  style: {width: "95%"},
  placeholder:'Datasets'
});

// loading datasets 
var loadingDatasetSelect = ui.Select({
  items: [],
  style: {width: "95%"},
  placeholder:'Loading...'
});


// ui.Select coberturas
var coberturaSelect = ui.Select({
  items: cobs,
  placeholder:'Seleccionar Cobertura LiDAR',
  //value: '1a Cobertura',
  style: {width: "95%"},
  onChange:function(cover){
    buttonPanels.clear().add(coberturaSelect).add(loadingDatasetSelect);
    // chechk the  type of LiDR Cover 
    var datasets = checkDatasetCovers(cover);
    ee.List(datasets).evaluate(function(list){
      //print(list)
        datasetSelect = ui.Select({
          placeholder: 'Variables LiDAR',
          items: list,
          style: {width: "95%"},
          //value: 'All regions'
          onChange: function(image){
            
            return displayImage(image,checkCovers(cover))}
        });
    buttonPanels.clear().add(coberturaSelect).add(datasetSelect); 
    });
  }
});
      
buttonPanels.clear().add(coberturaSelect).add(datasetSelect);




// add widgets to panel 

Map.setCenter(-4.758, 41.607,7.5);
mainPanel.add(mainTitle).add(buttonPanels);

ui.root.add(mainPanel);